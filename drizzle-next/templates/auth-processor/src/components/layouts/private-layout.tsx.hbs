"use client";

import { useState } from "react";
import { usePathname } from "next/navigation";
import Link from "next/link";
import {
  User2Icon,
  LogOutIcon,
  LayoutDashboardIcon,
  UserIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from "lucide-react";
import { Avatar } from "@/components/ui/avatar";
import { SelectUser } from "@/db/schema/users";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { DarkModeToggle } from "@/components/ui/dark-mode";

const sidebarItems = [
  { text: "Dashboard", link: "/dashboard", icon: LayoutDashboardIcon },
  { text: "Profile", link: "/profile", icon: UserIcon },
  { text: "Sign out", link: "/signout", icon: LogOutIcon },
];

export function PrivateLayout({
  userObj,
  children,
}: {
  userObj: SelectUser;
  children: React.ReactNode;
}) {
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const pathname = usePathname();

  return (
    <div className="bg-background flex min-h-screen">
      {/* Sidebar */}
      <aside
        className={cn(
          "bg-card border-border flex flex-col border-r transition-all duration-300",
          sidebarCollapsed ? "w-16" : "min-w-64",
        )}
      >
        {/* Sidebar Header */}
        <div className="border-border flex items-center justify-between border-b p-4">
          {!sidebarCollapsed && (
            <h1 className="text-lg font-semibold">Drizzle Next</h1>
          )}
          <Button
            onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
            className="rounded-md p-2"
            variant="ghost"
          >
            {sidebarCollapsed ? (
              <ChevronRightIcon size={20} />
            ) : (
              <ChevronLeftIcon size={20} />
            )}
          </Button>
        </div>

        {/* Sidebar Navigation */}
        <nav className="p-4">
          <ul className="space-y-2">
            {sidebarItems.map((item) => {
              const Icon = item.icon;
              const isActive = pathname === item.link;

              return (
                <li key={item.link}>
                  <Link
                    href={item.link}
                    className={cn(
                      "hover:bg-muted flex items-center rounded-md transition-colors",
                      sidebarCollapsed
                        ? "justify-center px-3 py-3"
                        : "gap-3 px-3 py-2",
                      isActive && "bg-muted text-muted-foreground",
                    )}
                  >
                    <Icon size={20} className="flex-shrink-0" />
                    {!sidebarCollapsed && <span>{item.text}</span>}
                  </Link>
                </li>
              );
            })}
          </ul>
        </nav>

        {/* User Section at Bottom */}
        <div className="border-border mt-auto border-t p-4">
          <div
            className={cn(
              "bg-muted/30 flex items-center rounded-lg p-3",
              sidebarCollapsed ? "justify-center" : "gap-3",
            )}
          >
            <Avatar src={userObj.image}>
              <User2Icon />
            </Avatar>
            {!sidebarCollapsed && (
              <div className="min-w-0 flex-1">
                <p className="text-muted-foreground truncate text-xs">
                  {userObj.email}
                </p>
              </div>
            )}
          </div>
        </div>
      </aside>

      {/* Main Content */}
      <main className="flex flex-1 flex-col">
        {/* Top Bar */}
        <header className="bg-card border-border border-b p-4">
          <div className="flex items-center justify-end">
            <DarkModeToggle />
          </div>
        </header>

        {/* Content Area */}
        <div className="flex-1 p-6">{children}</div>
      </main>
    </div>
  );
}
