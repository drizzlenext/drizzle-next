"use server";

import { eq } from "drizzle-orm";
import { revalidatePath } from "next/cache";
import { z } from "zod";
import { db } from "@/lib/db";
import { {{tableObj.pluralCamelCase}} } from "@/schema/{{tableObj.pluralKebabCase}}";

const delete{{tableObj.singularPascalCase}}Schema = z.object({
  {{#each validatedColumns}}
  {{#switch this.columnName}}
  {{#case "id"}}
  id: {{this.zodCode}},
  {{/case}}
  {{/switch}}
  {{/each}}
}).pick({ id: true });

export interface Delete{{tableObj.singularPascalCase}}State {
  errors?: {
    id?: string[];
  };
  message?: string;
  status?: "success" | "error";
}

export async function delete{{tableObj.singularPascalCase}}(
  prevState: Delete{{tableObj.singularPascalCase}}State,
  formData: FormData
): Promise<Delete{{tableObj.singularPascalCase}}State> {
  const validatedFields = delete{{tableObj.singularPascalCase}}Schema.safeParse({
    id: formData.get("id"),
  });

  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
      message: "Invalid data",
      status: "error",
    };
  }

  try {
    await db.delete({{tableObj.pluralCamelCase}}).where(eq({{tableObj.pluralCamelCase}}.id, validatedFields.data.id));
  } catch (error) {
    console.log(error);
    return {
      message: "Database error",
      status: "error",
    }
  }

  revalidatePath("/{{tableObj.pluralKebabCase}}");

  return {
    message: "{{tableObj.singularCapitalCase}} deleted successfully",
    status: "success",
  }
}
