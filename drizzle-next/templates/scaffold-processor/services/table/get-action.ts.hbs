import { eq, asc, desc, SQL } from "drizzle-orm";
import { db } from "@/lib/db";
import { {{tableObj.singularPascalCase}}, {{tableObj.pluralCamelCase}} } from "@/schema/{{tableObj.pluralKebabCase}}";

export type {{tableObj.pluralPascalCase}}List = Awaited<
  ReturnType<typeof get{{tableObj.pluralPascalCase}}List>
>;

export async function get{{tableObj.pluralPascalCase}}List({
  filters,
  limit,
  offset,
  sortKey,
  sortOrder,
}: {
  filters?: SQL;
  limit?: number;
  offset?: number;
  sortKey?: string;
  sortOrder?: string;
}) {
  let orderBy;
  if (sortKey && sortKey in {{tableObj.pluralCamelCase}}) {
    switch (sortOrder) {
      case "asc":
        orderBy = asc({{tableObj.pluralCamelCase}}[sortKey as keyof {{tableObj.singularPascalCase}}]);
        break;
      case "desc":
        orderBy = desc({{tableObj.pluralCamelCase}}[sortKey as keyof {{tableObj.singularPascalCase}}]);
        break;
    }
  }

  return await db.query.{{tableObj.pluralCamelCase}}.findMany({
    where: filters,
    orderBy: orderBy,
    limit: limit,
    offset: offset,
    with: undefined
  });
}

export type {{tableObj.singularPascalCase}}Obj = Awaited<
  ReturnType<typeof get{{tableObj.singularPascalCase}}Obj>
>;

export async function get{{tableObj.singularPascalCase}}Obj(id: {{pkStrategyJsType}}) {
  return await db.query.{{tableObj.pluralCamelCase}}.findFirst({
    where: eq({{tableObj.pluralCamelCase}}.id, id),
    with: undefined,
  });
}
