"use server";

import { eq } from "drizzle-orm";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";
import { z } from "zod";
import { db } from "@/lib/db";
import { {{tableObj.pluralCamelCase}} } from "@/schema/{{tableObj.pluralKebabCase}}";
{{#if importFileUtils}}
import { uploadFile } from "@/lib/file-utils";
{{/if}}
{{#if isNotPublic}}
import { auth } from "@/lib/auth";
{{/if}}
{{#if isAdmin}}
import { isAdmin } from "@/lib/authorization";
{{/if}}

const update{{tableObj.singularPascalCase}}Schema = z.object({
  {{#each validatedColumns}}
  {{this.caseVariants.originalCamelCase}}: {{this.zodCode}},
  {{/each}}
})
  .partial()
  .required({ id: true });

export interface Update{{tableObj.singularPascalCase}}State {
  errors?: {
    {{#each columns}}
    {{this}}?: string[];
    {{/each}}
  };
  message?: string;
}

export async function update{{tableObj.singularPascalCase}}(
  prevState: Update{{tableObj.singularPascalCase}}State,
  formData: FormData
): Promise<Update{{tableObj.singularPascalCase}}State> {
{{#if isNotPublic}}
  const session = await auth();

  if (!session?.user?.id) {
    throw new Error("unauthenticated");
  }
{{/if}}

{{#if isAdmin}}
  if (!isAdmin(session)) {
    throw new Error("unauthorized");
  }
{{/if}}

{{#each uploadColumnNames}}
  const {{this.singularCamelCase}}File = formData.get("{{this.originalCamelCase}}") as File;

  let {{this.singularCamelCase}}Uri;

  if ({{this.singularCamelCase}}File.size) {
    {{this.singularCamelCase}}Uri = await uploadFile({
      file: {{this.singularCamelCase}}File,
      dir: "{{../tableObj.pluralKebabCase}}"
    })
  }
{{/each}}

  const validatedFields = update{{tableObj.singularPascalCase}}Schema.safeParse({
    {{#each validatedColumns}}
    {{#switch this.dataType}}
    {{#case "file"}}
    {{this.caseVariants.originalCamelCase}}: {{this.caseVariants.singularCamelCase}}Uri,
    {{/case}}
    {{#default}}
    {{this.caseVariants.originalCamelCase}}: formData.get("{{this.caseVariants.originalCamelCase}}"),
    {{/default}}
    {{/switch}}
    {{/each}}    
  });

  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
      message: "Invalid data",
    };
  }

  try {
    await db
      .update({{tableObj.pluralCamelCase}})
      .set(validatedFields.data)
      .where(eq({{tableObj.pluralCamelCase}}.id, validatedFields.data.id));
  } catch (error) {
    console.error(error);
    return {
      message: "Database error",
    }
  }

  revalidatePath("{{#if isAdmin}}/admin{{/if}}/{{tableObj.pluralKebabCase}}");
  revalidatePath("{{#if isAdmin}}/admin{{/if}}/{{tableObj.pluralKebabCase}}/" + validatedFields.data.id);
  revalidatePath("{{#if isAdmin}}/admin{{/if}}/{{tableObj.pluralKebabCase}}/" + validatedFields.data.id + "/edit");
  redirect("{{#if isAdmin}}/admin{{/if}}/{{tableObj.pluralKebabCase}}/" + validatedFields.data.id + "?notice={{tableObj.singularPascalCase}} was successfully updated");
}
