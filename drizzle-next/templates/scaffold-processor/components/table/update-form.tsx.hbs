"use client";

{{#if hasFileDataType}}
import Link from "next/link";
{{/if}}
import { startTransition, useActionState } from "react";
import { update{{tableObj.singularPascalCase}}, Update{{tableObj.singularPascalCase}}State } from "@/services/{{tableObj.pluralKebabCase}}/update-{{tableObj.singularKebabCase}}";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Form, FormControl, FormMessage } from "@/components/ui/form";
{{formControlsImports}}
{{#if hasFileDataType}}
import { config } from "@/lib/config";
{{/if}}
import { {{tableObj.singularPascalCase}} } from "@/schema/{{tableObj.pluralKebabCase}}";
{{#each referencesColumnList}}
import { {{this.referenceTableVars.singularPascalCase}} } from "@/schema/{{this.referenceTableVars.pluralKebabCase}}";
{{/each}}

export function {{tableObj.singularPascalCase}}UpdateForm({ 
  {{tableObj.singularCamelCase}}Row,
  {{#each referencesColumnList}}
  {{this.referenceTableVars.singularCamelCase}}List,
  {{/each}}
}: { 
  {{tableObj.singularCamelCase}}Row: {{tableObj.singularPascalCase}};
  {{#each referencesColumnList}}
  {{this.referenceTableVars.singularCamelCase}}List: {{this.referenceTableVars.singularPascalCase}}[];
  {{/each}}
}) {
  const initialState: Update{{tableObj.singularPascalCase}}State = {};
  const [state, dispatch] = useActionState(update{{tableObj.singularPascalCase}}, initialState);

  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
    const formData = new FormData(event.target as HTMLFormElement);
    startTransition(() => dispatch(formData));
  }

  return (
      <Form onSubmit={handleSubmit}>
{{formControls}}
        <FormControl>
          <Button type="submit">Submit</Button>
        </FormControl>
        {state.message && <FormMessage variant={state.status}>{state.message}</FormMessage>}
      </Form>
  );
}
