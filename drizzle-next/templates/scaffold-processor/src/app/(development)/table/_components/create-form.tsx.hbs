"use client";

import { startTransition, useActionState } from "react";
import { create{{tableObj.singularPascalCase}}Action, Create{{tableObj.singularPascalCase}}State } from "../_lib/create-{{tableObj.singularKebabCase}}-action";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Form, FormControl, FormMessage } from "@/components/ui/form";
{{formControlsImports}}
{{#each referencesColumnList}}
import { Select{{this.referenceTableVars.singularPascalCase}} } from "@/schema/{{this.referenceTableVars.pluralKebabCase}}";
{{/each}}

export function {{tableObj.singularPascalCase}}CreateForm({{#if hasReferences}}{
  {{#each referencesColumnList}}
  {{this.referenceTableVars.singularCamelCase}}List,
  {{/each}}
}: {
  {{#each referencesColumnList}}
  {{this.referenceTableVars.singularCamelCase}}List: Select{{this.referenceTableVars.singularPascalCase}}[];
  {{/each}}
}{{/if}}) {
  const initialState: Create{{tableObj.singularPascalCase}}State = {};
  const [state, dispatch] = useActionState(create{{tableObj.singularPascalCase}}Action, initialState);

  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
    const formData = new FormData(event.target as HTMLFormElement);
    startTransition(() => dispatch(formData));
  }

  return (
    <Form onSubmit={handleSubmit}>
{{formControls}}
      <FormControl>
        <Button type="submit">Submit</Button>
      </FormControl>
      {state.message && <FormMessage variant={state.status}>{state.message}</FormMessage>}
    </Form>
  );
}
