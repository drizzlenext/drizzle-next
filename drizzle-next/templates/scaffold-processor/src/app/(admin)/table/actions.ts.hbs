"use server";

import { eq } from "drizzle-orm";
import { revalidatePath } from "next/cache";
import { z } from "zod";
import { db } from "@/config/db";
import { {{tableObj.pluralCamelCase}} } from "@/schema/{{tableObj.pluralKebabCase}}";
{{#if importFileUtils}}
import { uploadFile } from "@/lib/upload";
{{/if}}

const insert{{tableObj.singularPascalCase}}Schema = z.object({
  {{#each validatedColumns}}
  {{this.caseVariants.originalCamelCase}}: {{this.zodCode}},
  {{/each}}
});

export type Create{{tableObj.singularPascalCase}}State = {
  errors?: {
    {{#each createColumns}}
    {{this}}?: string[];
    {{/each}}
  };
  message?: string;
  status?: "success" | "error";
}

export async function create{{tableObj.singularPascalCase}}Action(
  prevState: Create{{tableObj.singularPascalCase}}State,
  formData: FormData
): Promise<Create{{tableObj.singularPascalCase}}State> {
  if (process.env.NODE_ENV !== "development") {
    throw new Error("only accessible in development");
  }
{{#each uploadColumnNames}}

  const {{this.originalCamelCase}}File = formData.get("{{this.originalCamelCase}}") as File;

  let {{this.originalCamelCase}}Uri;

  if ({{this.originalCamelCase}}File.size) {
    {{this.originalCamelCase}}Uri = await uploadFile({
      file: {{this.originalCamelCase}}File,
      dir: "{{../tableObj.pluralKebabCase}}/{{this.originalKebabCase}}"
    })
  }
{{/each}}

  const validatedFields = insert{{tableObj.singularPascalCase}}Schema.safeParse({
    {{#each validatedColumns}}
    {{#switch this.dataType}}
    {{#case "file"}}
    {{this.caseVariants.originalCamelCase}}: {{this.caseVariants.singularCamelCase}}Uri,
    {{/case}}
    {{#default}}
    {{this.caseVariants.originalCamelCase}}: formData.get("{{this.caseVariants.originalCamelCase}}"),
    {{/default}}
    {{/switch}}
    {{/each}}
  });

  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
      message: "Invalid data",
      status: "error",
    };
  }

  try {
    await db.insert({{tableObj.pluralCamelCase}}).values(validatedFields.data);
  } catch (error) {
    console.error(error);
    return {
      message: "Database error",
      status: "error",
    }
  }

  revalidatePath("/{{tableObj.pluralKebabCase}}");
  
  return {
    message: "{{tableObj.singularCapitalCase}} created successfully",
    status: "success"
  }
}

const update{{tableObj.singularPascalCase}}Schema = z.object({
  {{#each validatedColumnsWithIdAndTimestamps}}
  {{this.caseVariants.originalCamelCase}}: {{this.zodCode}},
  {{/each}}
})
  .partial()
  .required({ id: true });

export type Update{{tableObj.singularPascalCase}}State = {
  errors?: {
    {{#each updateColumns}}
    {{this}}?: string[];
    {{/each}}
  };
  message?: string;
  status?: "success" | "error";
}

export async function update{{tableObj.singularPascalCase}}Action(
  prevState: Update{{tableObj.singularPascalCase}}State,
  formData: FormData
): Promise<Update{{tableObj.singularPascalCase}}State> {
  if (process.env.NODE_ENV !== "development") {
    throw new Error("only accessible in development");
  }
{{#each uploadColumnNames}}

  const {{this.originalCamelCase}}File = formData.get("{{this.originalCamelCase}}") as File;

  let {{this.originalCamelCase}}Uri;

  if ({{this.originalCamelCase}}File.size) {
    {{this.originalCamelCase}}Uri = await uploadFile({
      file: {{this.originalCamelCase}}File,
      dir: "{{../tableObj.pluralKebabCase}}/{{this.originalKebabCase}}"
    })
  }
{{/each}}

  const validatedFields = update{{tableObj.singularPascalCase}}Schema.safeParse({
    {{#each validatedColumnsWithIdAndTimestamps}}
    {{#switch this.dataType}}
    {{#case "file"}}
    {{this.caseVariants.originalCamelCase}}: {{this.caseVariants.singularCamelCase}}Uri,
    {{/case}}
    {{#default}}
    {{this.caseVariants.originalCamelCase}}: formData.get("{{this.caseVariants.originalCamelCase}}"),
    {{/default}}
    {{/switch}}
    {{/each}}    
  });

  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
      message: "Invalid data",
      status: "error",
    };
  }

  try {
    await db
      .update({{tableObj.pluralCamelCase}})
      .set(validatedFields.data)
      .where(eq({{tableObj.pluralCamelCase}}.id, validatedFields.data.id));
  } catch (error) {
    console.error(error);
    return {
      message: "Database error",
      status: "error",
    }
  }

  revalidatePath("/{{tableObj.pluralKebabCase}}");
  revalidatePath("/{{tableObj.pluralKebabCase}}/" + validatedFields.data.id);
  revalidatePath("/{{tableObj.pluralKebabCase}}/" + validatedFields.data.id + "/edit");

  return {
    message: "{{tableObj.singularCapitalCase}} updated successfully",
    status: "success",
  }
}

const delete{{tableObj.singularPascalCase}}Schema = z.object({
  {{#each validatedColumnsWithIdAndTimestamps}}
  {{#switch this.columnName}}
  {{#case "id"}}
  id: {{this.zodCode}},
  {{/case}}
  {{/switch}}
  {{/each}}
}).pick({ id: true });

export type Delete{{tableObj.singularPascalCase}}State = {
  errors?: {
    id?: string[];
  };
  message?: string;
  status?: "success" | "error";
}

export async function delete{{tableObj.singularPascalCase}}Action(
  prevState: Delete{{tableObj.singularPascalCase}}State,
  formData: FormData
): Promise<Delete{{tableObj.singularPascalCase}}State> {
  if (process.env.NODE_ENV !== "development") {
    throw new Error("only accessible in development");
  }
  
  const validatedFields = delete{{tableObj.singularPascalCase}}Schema.safeParse({
    id: formData.get("id"),
  });

  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
      message: "Invalid data",
      status: "error",
    };
  }

  try {
    await db.delete({{tableObj.pluralCamelCase}}).where(eq({{tableObj.pluralCamelCase}}.id, validatedFields.data.id));
  } catch (error) {
    console.log(error);
    return {
      message: "Database error",
      status: "error",
    }
  }

  revalidatePath("/{{tableObj.pluralKebabCase}}");

  return {
    message: "{{tableObj.singularCapitalCase}} deleted successfully",
    status: "success",
  }
}
