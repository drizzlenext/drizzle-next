import Link from "next/link";
import { notFound } from "next/navigation";
{{#if hasFileDataType}}
import { env } from "@/lib/env";
{{/if}}
import { get{{tableObj.singularPascalCase}}ById } from "@/db/queries/{{tableObj.pluralKebabCase}}-queries";

type Params = Promise<{ id: string }>;

export default async function Page(props: { params: Params }) {
  const params = await props.params;
  const { id } = params;

  const {{tableObj.singularCamelCase}}Obj = await get{{tableObj.singularPascalCase}}ById(id);

  if (!{{tableObj.singularCamelCase}}Obj) {
    notFound();
  }

  return (
    <div className="flex flex-col gap-3 p-3">
      <div className="flex gap-3 [&>a]:underline">
        <Link href={`/admin/{{tableObj.pluralKebabCase}}`}>Back</Link>
        <Link href={`/admin/{{tableObj.pluralKebabCase}}/${ {{tableObj.singularCamelCase}}Obj.id }/edit`}>Edit</Link>
        <Link href={`/admin/{{tableObj.pluralKebabCase}}/${ {{tableObj.singularCamelCase}}Obj.id }/delete`}>Delete</Link>
      </div>
      <div>{{tableObj.singularCapitalCase}}</div>
      <div>
        <p><strong>Id:</strong> { {{tableObj.singularCamelCase}}Obj.id }</p>
        {{#each validatedColumns}}
          {{#switch this.dataType}}
            {{#case "boolean"}}
        <p><strong>{{this.caseVariants.originalCapitalCase}}:</strong> { {{../tableObj.singularCamelCase}}Obj.{{this.caseVariants.originalCamelCase}} ? "true": "false" }</p>
            {{/case}}
            {{#case "date"}}
        <p><strong>{{this.caseVariants.originalCapitalCase}}:</strong> { {{../tableObj.singularCamelCase}}Obj.{{this.caseVariants.originalCamelCase}}?.toLocaleDateString() }</p>
            {{/case}}
            {{#case "datetime"}}
        <p><strong>{{this.caseVariants.originalCapitalCase}}:</strong> { {{../tableObj.singularCamelCase}}Obj.{{this.caseVariants.originalCamelCase}}?.toLocaleString() }</p>
            {{/case}}   
            {{#case "timestamp"}}
        <p><strong>{{this.caseVariants.originalCapitalCase}}:</strong> { {{../tableObj.singularCamelCase}}Obj.{{this.caseVariants.originalCamelCase}}?.toLocaleString() }</p>
            {{/case}}
            {{#case "json"}}
        <p><strong>{{this.caseVariants.originalCapitalCase}}:</strong> { JSON.stringify({{../tableObj.singularCamelCase}}Obj.{{this.caseVariants.originalCamelCase}}) }</p>
            {{/case}}
            {{#case "jsonb"}}
        <p><strong>{{this.caseVariants.originalCapitalCase}}:</strong> { JSON.stringify({{../tableObj.singularCamelCase}}Obj.{{this.caseVariants.originalCamelCase}}) }</p>
            {{/case}}
            {{#case "references"}}
        <p><strong>{{this.caseVariants.originalCapitalCase}}:</strong> { {{../tableObj.singularCamelCase}}Obj.{{this.caseVariants.singularCamelCase}} }</p>
            {{/case}}
            {{#case "references_select"}}
        <p><strong>{{this.caseVariants.originalCapitalCase}}:</strong> { {{../tableObj.singularCamelCase}}Obj.{{this.caseVariants.singularCamelCase}} }</p>
            {{/case}}
            {{#case "file"}}
        <p><strong>{{this.caseVariants.originalCapitalCase}}:</strong> <Link href={`${env.NEXT_PUBLIC_UPLOAD_BASE_URL}/${ {{../tableObj.singularCamelCase}}Obj.{{this.caseVariants.originalCamelCase}} }`}>{ {{../tableObj.singularCamelCase}}Obj.{{this.caseVariants.originalCamelCase}} }</Link></p>
            {{/case}}
            {{#default}}
        <p><strong>{{this.caseVariants.originalCapitalCase}}:</strong> { {{../tableObj.singularCamelCase}}Obj.{{this.caseVariants.originalCamelCase}} }</p>
            {{/default}}
          {{/switch}}
        {{/each}}
      </div>
    </div>
  );
}
